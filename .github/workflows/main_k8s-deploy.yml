name: Build and deploy JAVA App to AKS

on:
  push:
    branches:
      - dev-aks
  workflow_dispatch:

env:
  REGISTRY_NAME: crwebdemo
  CLUSTER_NAME: aks-demo-webapp
  CLUSTER_RESOURCE_GROUP: rg-github-action-001
  NAMESPACE: ns-dev-aks-demo-java-webapp
  SECRET: secret-docker-image
  APP_NAME: webapp

jobs:
  # unittest:
  #   name: Unit Test
  #   runs-on: ubuntu-latest
  
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v2
  #     with:
  #       ref: dev-aks

  #   - name: Set up Java version
  #     uses: actions/setup-java@v1
  #     with:
  #       java-version: '11'

  #   - name: Run Unit Test with Maven
  #     run: mvn test

  build:
    runs-on: ubuntu-latest
    name: Build Artifact
    # needs: unittest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: dev-aks

    - name: Set up Java version
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Maven
      run: mvn clean install

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v2
      with:
        name: artifact
        path: '${{ github.workspace }}/target/*.jar'

  push:
    runs-on: ubuntu-latest
    name: Build & Push Image to ACR
    needs: build

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: dev-aks

    - name: Download Artifact
      uses: actions/download-artifact@v2
      with:
        name: artifact
        path: '${{ github.workspace }}/target'
    
    - name: Display structure of downloaded files
      run: ls -R
      working-directory: '${{ github.workspace }}/target'
      
      # Connect to Azure Container Registry (ACR)
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }} 
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
      # Container build and push to a Azure Container Registry (ACR)
    - run: |
        docker build . -t ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to AKS
    needs: push

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: dev-aks
        
    # Set the target Azure Kubernetes Service (AKS) cluster. 
    - uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}

    # Create namespace if doesn't exist
    - run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -
    
    # Create image pull secret for ACR
    - uses: azure/k8s-create-secret@v1
      with:
        container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
        container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
        container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        secret-name: ${{ env.SECRET }}
        namespace: ${{ env.NAMESPACE }}
        force: true
    
    # Deploy app to AKS
    - uses: azure/k8s-deploy@v1
      with:
        manifests: |
          aks-deploy.yml
        images: |
          ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
        imagepullsecrets: |
          ${{ env.SECRET }}
        namespace: ${{ env.NAMESPACE }}



  # build:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@main

  #   # Build on GITHUB HOST
  #   - name: Set up Java version
  #     uses: actions/setup-java@v1
  #     with:
  #       java-version: '11'

  #   - name: Build with Maven
  #     run: mvn clean install

  #   - name: Upload artifact for deployment job
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: java-app
  #       path: '${{ github.workspace }}/target/*.jar'
    
  #   # Connect to Azure Container Registry (ACR)
  #   - uses: azure/docker-login@v1
  #     with:
  #       login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
  #       username: ${{ secrets.REGISTRY_USERNAME }} 
  #       password: ${{ secrets.REGISTRY_PASSWORD }}
    
  #   # Container build and push to a Azure Container Registry (ACR)
  #   - run: |
  #       docker build . -t ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
  #       docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}

  #   # Set the target Azure Kubernetes Service (AKS) cluster. 
  #   - uses: azure/aks-set-context@v1
  #     with:
  #       creds: '${{ secrets.AZURE_CREDENTIALS }}'
  #       cluster-name: ${{ env.CLUSTER_NAME }}
  #       resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}

  #   # Create namespace if doesn't exist
  #   - run: |
  #       kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -
    
  #   # Create image pull secret for ACR
  #   - uses: azure/k8s-create-secret@v1
  #     with:
  #       container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
  #       container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
  #       container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
  #       secret-name: ${{ env.SECRET }}
  #       namespace: ${{ env.NAMESPACE }}
  #       force: true
    
  #   # Deploy app to AKS
  #   - uses: azure/k8s-deploy@v1
  #     with:
  #       manifests: |
  #         aks-deploy.yml
  #       images: |
  #         ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
  #       imagepullsecrets: |
  #         ${{ env.SECRET }}
  #       namespace: ${{ env.NAMESPACE }}




  # integrate_test:
  #   runs-on: ubuntu-latest
  #   name: Run Robot Framework Tests

  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v2

  #   - name: Robot Framework
  #     uses: joonvena/robotframework-docker-action@v1.0
  #     with:
  #         browser: 'firefox'

  #   - name: Upload report
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: report
  #       path: '${{ github.workspace }}/robot_tests/*'